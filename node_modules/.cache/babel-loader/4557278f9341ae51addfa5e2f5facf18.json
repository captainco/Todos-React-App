{"ast":null,"code":"var _jsxFileName = \"/home/quocco/Desktop/Todos-React-App/src/App.js\";\nimport React, { Component } from 'react';\nimport Stat from './Components/StatComponent';\nimport Todo from './Components/TodoComponent';\nimport NewTodoForm from './Components/NewTodoFormComponent';\nimport './App.css'; // import 'font-awesome/dist';\n\nexport default class App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      todos: [// {name:'Todo 1', done:true},\n        // {name:'Todo 2', done:false},\n        // {name:'Todo 3', done:false}\n      ]\n    };\n  }\n\n  getTodo() {\n    fetch('http://todos.sphinx-demo.com/todos').then(res => res.json()).then(todo => this.setState({\n      todos: todo\n    }));\n  } // deleteTodo() {\n  //     this.state.todos.forEach(todo => {\n  //         if (todo.done) {\n  //             fetch('http://todos.sphinx-demo.com/todos', {\n  //                 method: 'DELETE',\n  //                 headers: {\n  //                     'Content-Type': 'application/json',\n  //                 },\n  //                 body: JSON.stringify(todo.done),\n  //             })\n  //             .then(() => {\n  //                 this.getTodo();\n  //             });    \n  //         }\n  //     })\n  // }\n\n\n  addNewTodo(newTodo) {\n    fetch('http://todos.sphinx-demo.com/todos', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(newTodo)\n    }).then(() => {\n      this.getTodo();\n    });\n  }\n\n  deleteTodo() {\n    this.state.todos.forEach(todo => {\n      if (todo.done) {\n        fetch('http://todos.sphinx-demo.com/todos/' + todo.id, {\n          method: 'DELETE',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n      }\n    });\n  }\n\n  countDone() {\n    let done = 0;\n    this.state.todos.forEach(todo => {\n      if (todo.done) {\n        done++;\n      }\n    });\n    return done;\n  }\n\n  clearDone() {\n    const notFinishedTodo = this.state.todos.filter(todo => !todo.done);\n    this.setState({\n      todos: notFinishedTodo\n    });\n  }\n\n  selectAll(right) {\n    const todos = this.state.todos;\n\n    for (let i = 0; i < todos.length; i++) {\n      todos[i].done = right;\n    }\n\n    this.setState({\n      todos: todos\n    });\n  }\n\n  handleDoneChange(todoIndex) {\n    let updatedTodos = this.state.todos;\n    updatedTodos[todoIndex].done = !updatedTodos[todoIndex].done;\n    this.setState({\n      todos: updatedTodos\n    });\n  }\n\n  componentDidMount() {\n    this.getTodo();\n  }\n\n  render() {\n    const done = this.countDone();\n    const totalTodo = this.state.todos.length;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: 'todo-status',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(Stat, {\n      done: done,\n      total: totalTodo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: () => this.selectAll(true),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \"Select All\"), \"\\xA0\", React.createElement(\"button\", {\n      onClick: () => this.selectAll(false),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, \"Unselect All\"), \"\\xA0\", React.createElement(\"button\", {\n      onClick: () => this.clearDone(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, \"Clear Done\")), React.createElement(\"div\", {\n      className: 'todo-list',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, this.state.todos.map((todo, index) => React.createElement(Todo, {\n      onDoneChange: () => {\n        this.handleDoneChange(index);\n      },\n      key: index,\n      todo: todo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    })))), React.createElement(\"div\", {\n      className: 'new-todo-form',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, React.createElement(NewTodoForm, {\n      onNewToDo: todo => {\n        this.addNewTodo(todo);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["/home/quocco/Desktop/Todos-React-App/src/App.js"],"names":["React","Component","Stat","Todo","NewTodoForm","App","state","todos","getTodo","fetch","then","res","json","todo","setState","addNewTodo","newTodo","method","headers","body","JSON","stringify","deleteTodo","forEach","done","id","countDone","clearDone","notFinishedTodo","filter","selectAll","right","i","length","handleDoneChange","todoIndex","updatedTodos","componentDidMount","render","totalTodo","map","index"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Stat from './Components/StatComponent';\nimport Todo from './Components/TodoComponent';\nimport NewTodoForm from './Components/NewTodoFormComponent';\nimport './App.css';\n// import 'font-awesome/dist';\n\nexport default class App extends Component {\n    state = {\n    todos: [\n            // {name:'Todo 1', done:true},\n            // {name:'Todo 2', done:false},\n            // {name:'Todo 3', done:false}\n        ]\n    }\n\n    getTodo() {\n        fetch('http://todos.sphinx-demo.com/todos')\n            .then(res => res.json())\n            .then(todo => this.setState({todos: todo}));\n    }\n\n    // deleteTodo() {\n    //     this.state.todos.forEach(todo => {\n    //         if (todo.done) {\n    //             fetch('http://todos.sphinx-demo.com/todos', {\n    //                 method: 'DELETE',\n    //                 headers: {\n    //                     'Content-Type': 'application/json',\n    //                 },\n    //                 body: JSON.stringify(todo.done),\n    //             })\n    //             .then(() => {\n    //                 this.getTodo();\n    //             });    \n    //         }\n    //     })\n    // }\n\n    addNewTodo(newTodo) {\n\n        fetch('http://todos.sphinx-demo.com/todos', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(newTodo),\n        })\n        .then(() => {\n            this.getTodo();\n        });\n    }\n\n    deleteTodo() {\n        this.state.todos.forEach(todo => {\n            if (todo.done) {\n                fetch('http://todos.sphinx-demo.com/todos/' + todo.id, {\n                    method: 'DELETE',\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                })\n            }\n        })\n    }\n\n    countDone() {\n        let done = 0;\n        this.state.todos.forEach(todo => {\n            if (todo.done) {\n                done++;\n            }\n        })\n        return done;\n    }\n\n    clearDone() {\n        const notFinishedTodo = this.state.todos.filter((todo) => !todo.done);\n        this.setState({\n            todos: notFinishedTodo\n        })\n        \n    }\n\n    selectAll(right) {\n        const todos = this.state.todos;\n        for (let i = 0; i < todos.length; i++) {\n            todos[i].done = right;\n        }\n        this.setState({\n            todos: todos\n        })\n    }\n\n    handleDoneChange(todoIndex) {\n        let updatedTodos = this.state.todos;\n        updatedTodos[todoIndex].done = !updatedTodos[todoIndex].done;\n\n        this.setState({\n            todos: updatedTodos\n        })\n    }\n\n    componentDidMount() {\n        this.getTodo();\n    }\n\n    render() {\n        const done = this.countDone();\n        const totalTodo = this.state.todos.length;\n\n        return (\n            <div>\n                <div className={'todo-status'}>\n                    <Stat done={done} total={totalTodo}/><br/>\n                    <button onClick={() => this.selectAll(true)}>Select All</button>\n                    &nbsp;\n                    <button onClick={() => this.selectAll(false)}>Unselect All</button>\n                    &nbsp;\n                    <button onClick={() => this.clearDone()}>Clear Done</button>\n                </div>\n\n                <div className={'todo-list'}>\n                    \n                    <ul>\n                        {\n                            this.state.todos.map((todo, index) => (<Todo onDoneChange={() => {\n                                this.handleDoneChange(index);\n                            }} key={index} todo={todo}/>))\n                        }\n                    </ul>\n\n                </div>\n\n                <div className={'new-todo-form'}>\n                    <NewTodoForm onNewToDo={(todo) => {\n                        this.addNewTodo(todo)\n                    }}/>\n                </div>\n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}