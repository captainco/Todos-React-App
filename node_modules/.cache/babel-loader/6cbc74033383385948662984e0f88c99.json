{"ast":null,"code":"var _jsxFileName = \"/home/quocco/Desktop/Todo-React-App/src/App.js\";\nimport React, { Component } from 'react';\nimport Stat from './Components/StatComponent'; // import Todo               from './Components/TodoComponent';\n\nimport NewTodoForm from './Components/NewTodoFormComponent';\nimport './App.css';\n\nclass Todo extends React.Component {\n  render() {\n    const todo = this.props.todo;\n    const todoLableStyle = this.props.todo.done ? {\n      textDecoration: 'line-through',\n      color: \"gray\"\n    } : {};\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"checkbox\",\n      onChange: this.props.onDoneChange,\n      checked: todo.done,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      style: todoLableStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, todo.name));\n  }\n\n}\n\nexport default class App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      todos: [{\n        name: 'Todo 1',\n        done: true\n      }, {\n        name: 'Todo 2',\n        done: false\n      }, {\n        name: 'Todo 3',\n        done: false\n      }]\n    };\n  }\n\n  addNewTodo(newTodo) {\n    this.setState({\n      todos: [...this.state.todos, newTodo]\n    });\n  }\n\n  countDone() {\n    let done = 0;\n    this.state.todos.forEach(todo => {\n      if (todo.done) {\n        done++;\n      }\n    });\n    return done;\n  }\n\n  clearDone() {\n    const notFinishedTodo = this.state.todos.filter(todo => !todo.done);\n    this.setState({\n      todos: notFinishedTodo\n    });\n  }\n\n  selectAll(right) {\n    const todos = this.state.todos;\n\n    for (let i = 0; i < todos.length; i++) {\n      todos[i].done = right;\n    }\n\n    this.setState({\n      todos: todos\n    });\n  }\n\n  handleDoneChange(todoIndex) {\n    let updatedTodos = this.state.todos;\n    updatedTodos[todoIndex].done = !updatedTodos[todoIndex].done;\n    this.setState({\n      todos: updatedTodos\n    });\n  }\n\n  render() {\n    const done = this.countDone();\n    const totalTodo = this.state.todos.length;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: 'todo-status',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(Stat, {\n      done: done,\n      total: totalTodo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: () => this.selectAll(true),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \"Select All\"), \"\\xA0\", React.createElement(\"button\", {\n      onClick: () => this.selectAll(false),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, \"Unselect All\"), \"\\xA0\", React.createElement(\"button\", {\n      onClick: () => this.clearDone(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, \"Clear Done\")), React.createElement(\"div\", {\n      className: 'todo-list',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, this.state.todos.map((todo, index) => React.createElement(Todo, {\n      onDoneChange: () => {\n        this.handleDoneChange(index);\n      },\n      key: index,\n      todo: todo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    })))), React.createElement(\"div\", {\n      className: 'new-todo-form',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(NewTodoForm, {\n      onNewToDo: todo => {\n        this.addNewTodo(todo);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["/home/quocco/Desktop/Todo-React-App/src/App.js"],"names":["React","Component","Stat","NewTodoForm","Todo","render","todo","props","todoLableStyle","done","textDecoration","color","onDoneChange","name","App","state","todos","addNewTodo","newTodo","setState","countDone","forEach","clearDone","notFinishedTodo","filter","selectAll","right","i","length","handleDoneChange","todoIndex","updatedTodos","totalTodo","map","index"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Stat               from './Components/StatComponent';\n// import Todo               from './Components/TodoComponent';\nimport NewTodoForm        from './Components/NewTodoFormComponent';\nimport                         './App.css';\n\nclass Todo extends React.Component{\n\n  render() {\n    const todo = this.props.todo;\n    const todoLableStyle =  this.props.todo.done ? {\n      textDecoration : 'line-through',\n      color: \"gray\"\n    }: {}\n\n    return (\n      <div>\n        <input type=\"checkbox\" onChange={this.props.onDoneChange} checked={todo.done}></input>\n        <span style={todoLableStyle}>{todo.name}</span>\n      </div>\n    );\n  } \n}\n\nexport default class App extends Component {\n  state = {\n    todos: [\n      {name:'Todo 1', done:true},\n      {name:'Todo 2', done:false},\n      {name:'Todo 3', done:false}\n    ]\n  }\n\n  addNewTodo(newTodo) {\n      this.setState({\n      todos:[...this.state.todos, newTodo]\n    })\n  }\n\n  countDone() {\n    let done = 0;\n    this.state.todos.forEach(todo=>{\n      if (todo.done) {\n        done++;\n      }\n    })\n    return done;\n  }\n\n  clearDone() {\n    const notFinishedTodo = this.state.todos.filter((todo) => !todo.done);\n    this.setState({\n      todos:notFinishedTodo\n    })\n  }\n\n  selectAll(right) {\n    const todos = this.state.todos;\n    for (let i = 0; i < todos.length; i++) {\n      todos[i].done = right;\n    }\n    this.setState({\n      todos: todos\n    })\n  }\n\n  handleDoneChange(todoIndex) {\n    let updatedTodos             = this.state.todos;\n    updatedTodos[todoIndex].done = !updatedTodos[todoIndex].done;\n\n    this.setState({\n      todos: updatedTodos\n    })\n  }\n\n  render() {\n    const done      = this.countDone();\n    const totalTodo = this.state.todos.length;\n\n    return (\n      <div>\n\n        <div className={'todo-status'}>\n          <Stat done={done} total={totalTodo}/><br/>\n          <button onClick={() => this.selectAll(true)}>Select All</button>&nbsp;\n          <button onClick={() => this.selectAll(false)}>Unselect All</button>&nbsp;\n          <button onClick={()=> this.clearDone()}>Clear Done</button>\n        </div>\n\n        <div className={'todo-list'}>\n          <ul>\n            {\n              this.state.todos.map((todo, index)=>(<Todo onDoneChange={()=>{\n                this.handleDoneChange(index);\n              }} key={index} todo={todo} />))\n            }\n          </ul>\n        </div>\n\n        <div className={'new-todo-form'}>\n          <NewTodoForm onNewToDo={(todo)=>{\n            this.addNewTodo(todo)\n          }}/>\n        </div>\n\n      </div>\n    )\n  }\n  \n}\n"]},"metadata":{},"sourceType":"module"}